---
import MaxWidth from "./maxWidth.astro";
import Image from "astro/components/Image.astro";
import HalfRing from "/public/decorators/half ring.svg";
import LogoSmall from "/public/images/logo-small.svg";
import { cmsURL } from "../constants";

const footerDataResponse = await fetch(`${cmsURL}/api/globals/footer`, {
  credentials: "include",
});

const footerData = await footerDataResponse.json();
---

<footer class="relative bg-gray">
  <div class="bg-white md:pt-20">
    <div class="relative w-[clamp(15rem,30vw,18em)] mx-auto">
      <img
        src={HalfRing.src}
        width={HalfRing.width}
        height={HalfRing.height}
        alt=""
        class:list={"asbolute mx-auto bottom-0"}
        loading={"eager"}
      />
      <div
        class="absolute left-[50%] -translate-x-[50%] translate-y-[50%] bottom-0 w-[50%]"
      >
        <img
          src={LogoSmall.src}
          width={LogoSmall.width}
          height={LogoSmall.height}
          alt=""
          class:list={"w-full transition-transform ease-out duration-75"}
          loading={"eager"}
          id="rotating-logo"
        />
      </div>
    </div>
  </div>
  <MaxWidth class="pt-[5.5rem] md:pt-16 pb-12 flex flex-col gap-5">
    <span class="text-md">{footerData.copyright}</span>
    <span class="text-sm text-pale-blue/80">{footerData.tagline}</span>
  </MaxWidth>
</footer>

<script>
  const rotatingLogo = document.getElementById("rotating-logo");

  const toDeg = (radian: number) => (radian * 180) / Math.PI;

  const calculateAngleToMouse = (distanceX: number, distanceY: number) => {
    const res =
      -55 +
      (distanceY >= 0
        ? 90 + toDeg(Math.atan(Math.abs(distanceY) / Math.abs(distanceX)))
        : toDeg(Math.atan(Math.abs(distanceX) / Math.abs(distanceY))));
    return res;
  };

  const applyRotation = (elem: HTMLElement, mouseX: number, mouseY: number) => {
    const distanceX =
      mouseX - (elem.getBoundingClientRect().left + elem.clientWidth / 2);
    const distanceY =
      mouseY - (elem.getBoundingClientRect().top + elem.clientHeight / 2);
    const angleToMouse = calculateAngleToMouse(distanceX, distanceY);
    if (distanceX < 0) {
      elem.style.transform =
        "scaleX(-1) rotate(" + String(angleToMouse) + "deg)";
    } else {
      elem.style.transform = "rotate(" + String(angleToMouse) + "deg)";
    }
  };

  const mouseMoveHandler = (event: MouseEvent) => {
    if (rotatingLogo) applyRotation(rotatingLogo, event.clientX, event.clientY);
    return 0;
  };

  let throttleTimer: boolean;

  const throttle = (
    event: MouseEvent,
    callback: (e: MouseEvent) => number,
    time: number
  ) => {
    if (throttleTimer) return;
    throttleTimer = true;

    setTimeout(() => {
      callback(event);
      throttleTimer = false;
    }, time);
  };

  const mouseMoveHandlerThrottle = (event: MouseEvent) => {
    throttle(event, mouseMoveHandler, 15);
  };

  let handleInteraction = (
    entries: IntersectionObserverEntry[],
    observer: IntersectionObserver
  ) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        document.addEventListener("mousemove", mouseMoveHandlerThrottle);
      } else {
        document.removeEventListener("mousemove", mouseMoveHandlerThrottle);
        if (rotatingLogo) rotatingLogo.style.transform = "rotate(0)";
      }
    });
  };

  let observer = new IntersectionObserver(handleInteraction);
  document?.querySelectorAll("#rotating-logo")?.forEach((i) => {
    observer.observe(i);
  });
</script>
