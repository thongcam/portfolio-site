---
interface Props {
  class: string;
  enableAnimation: boolean;
  fromCorner: boolean;
}
const { class: className, enableAnimation, fromCorner } = Astro.props;
const initialOffsetY = fromCorner
  ? "translate(-50px, 80px)"
  : "translate(-50px, 0)";
---

<div class:list={className}>
  {
    enableAnimation ? (
      <svg
        width="100%"
        height="100%"
        viewBox="0 0 421 421"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        class="threeCircles"
        style={`transform: translate(-50px,${fromCorner ? "80px" : "0"});`}
      >
        <circle
          cx="210"
          cy="210"
          r="45"
          stroke="#34BAB4"
          stroke-width="50"
          data-animation-class="ringThreeAnimation"
          class="ringThree"
        />
        <circle
          cx="210"
          cy="210"
          r="55"
          stroke="#198F8A"
          stroke-width="35"
          data-animation-class="ringTwoAnimation"
          class="ringTwo"
        />
        <circle
          cx="210"
          cy="210"
          r="70"
          stroke="#293F5F"
          stroke-width="35"
          data-animation-class="ringOneAnimation"
          class="ringOne"
        />
      </svg>
    ) : (
      <svg
        width="100%"
        height="100%"
        viewBox="0 0 421 421"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        class={""}
      >
        <circle
          cx="210"
          cy="210"
          r="195"
          stroke="#34BAB4"
          stroke-width="32"
          data-animation-class="ringThreeAnimation"
          class="ringThree"
        />
        <circle
          cx="210"
          cy="210"
          r="164.5"
          stroke="#198F8A"
          stroke-width="31"
          data-animation-class="ringTwoAnimation"
          class="ringTwo"
        />
        <circle
          cx="210"
          cy="210"
          r="136.5"
          stroke="#293F5F"
          stroke-width="30"
          data-animation-class="ringOneAnimation"
          class="ringOne"
        />
      </svg>
    )
  }
</div>

<script>
  let options = {
    root: null,
    rootMargin: "0px 0px 25% 0px",
    threshold: 1.0,
  };

  let addAnimation = (
    entries: IntersectionObserverEntry[],
    observer: IntersectionObserver
  ) => {
    entries.forEach((entry) => {
      if (entry.intersectionRatio >= 1) {
        entry.target.classList.add("threeCirclesAnimation");
        [...entry.target.children].forEach((c) => {
          c.classList.add(c.getAttribute("data-animation-class") || "");
        });
      }
    });
  };

  let observer = new IntersectionObserver(addAnimation, options);
  document?.querySelectorAll(".threeCircles")?.forEach((i) => {
    observer.observe(i);
  });
</script>

<style>
  @media (min-width: 741px) {
    .threeCirclesAnimation {
      animation: threeCircles 500ms 200ms cubic-bezier(0, 0, 0.2, 1) forwards;
      transform-origin: center;
    }
  }

  .ringOneAnimation {
    animation: ringOne 1000ms 200ms cubic-bezier(0, 0, 0.2, 1) forwards;
    /* r: 70px;
    stroke-width: 50; */
    transform-origin: center;
  }

  .ringTwoAnimation {
    animation: ringTwo 1000ms 300ms cubic-bezier(0, 0, 0.2, 1) forwards;
    /* r: 60px;
    stroke-width: 60; */
    transform-origin: center;
  }

  .ringThreeAnimation {
    animation: ringThree 1000ms 400ms cubic-bezier(0, 0, 0.2, 1) forwards;
    /* r: 50px;
    stroke-width: 70; */
    transform-origin: center;
  }

  @keyframes threeCircles {
    from {
    }
    to {
      transform: translate(0);
    }
  }

  @keyframes ringOne {
    from {
      r: 70px;

      stroke-width: 35;
    }
    to {
      r: 136.5px;
      transform: translate(0);

      stroke-width: 25;
    }
  }

  @keyframes ringTwo {
    from {
      r: 55px;

      stroke-width: 35;
    }
    to {
      r: 164.5px;
      transform: translate(0);
      stroke-width: 31;
    }
  }

  @keyframes ringThree {
    from {
      r: 45px;
      stroke-width: 50;
    }
    to {
      r: 195px;
      transform: translate(0);

      stroke-width: 32;
    }
  }
</style>
