---
import Image from "astro/components/Image.astro";
// import type { ImageMetadata } from "astro";
import InternalLinkWhite from "/public/icons/Internal link white.svg";
import ExternalLinkWhite from "/public/icons/External link white.svg";
import EllipseDecorator from "/public/decorators/ellipseDecorator.svg";
import RectangleDecorator from "/public/decorators/rectangleDecorator.svg";
import type { CardContentType } from "../../types/cardContentType";
import { cmsURL } from "../../constants";
import RichText from "../richText.astro";

interface Props {
  content: CardContentType;
  imageAlign: string;
  decorator: string;
  bg: string;
}

const { content, imageAlign, decorator, bg } = Astro.props;
const { title, description, subDescription, linkLabel, url, thumbnailImage } =
  content;
let checkURL = new URL(url);
const external = checkURL.origin !== Astro.url.origin;
// const images = import.meta.glob<{ default: ImageMetadata }>(
//   "/src/assets/*.{jpeg,jpg,png,gif}"
// );
// if (!images[image.src])
//   throw new Error(
//     `"${image.src}" does not exist in glob: "src/assets/*.{jpeg,jpg,png,gif}"`
//   );
---

<div
  class:list={[
    "flex flex-col gap-5 lg:grid lg:grid-rows-1 lg:gap-10 w-full",
    imageAlign == "right" ? "lg:grid-cols-[37%_1fr]" : "lg:grid-cols-[1fr_37%]",
  ]}
>
  <Image
    src={`${cmsURL}${thumbnailImage.sizes.cardThumbnail.url}`}
    alt={thumbnailImage.alt}
    class:list={[
      "object-cover w-full h-full border border-dark-gray/50",
      imageAlign == "right" ? "lg:order-1" : "lg:order-0",
    ]}
    width={thumbnailImage.sizes.cardThumbnail.width}
    height={thumbnailImage.sizes.cardThumbnail.height}
  />
  <div
    class:list={[
      "relative w-full px-5 py-4 md:px-10 md:py-9 overflow-hidden",
      bg == "gray" ? "bg-gray" : "bg-white",
    ]}
  >
    <div class="z-10 h-full">
      <div class="flex flex-col justify-between min-h-[70%]">
        <div class="card-content">
          <h3 class="pb-5 font-display text-2xl font-bold">
            {title}
          </h3>
          <!-- <p class="" set:html={description} /> -->
          <RichText content={description} />
          {
            subDescription ? (
              <p class="italic text-pale-blue/80 pt-4">{subDescription}</p>
            ) : null
          }
        </div>
        <a
          href={url}
          tabindex="0"
          target={external ? "_blank" : ""}
          class="w-fit mt-8 p-5 flex flex-row gap-2 items-center bg-dark-blue hover:shadow-lg hover:bg-dark-blue-hover focus:shadow-lg focus:bg-dark-blue-hover focus-visible:outline-dark-cyan focus-visible:outline-2 focus-visible:outline-offset-2 active:scale-95 target:scale-95 transition-scale ease-in-out duration-200 hover:cursor-pointer"
          ><span class="text-white">
            {linkLabel}
          </span>

          <img
            src={external ? ExternalLinkWhite.src : InternalLinkWhite.src}
            alt={`${external ? "External link" : "Internal link"} to "${title}"`}
            class:list={"s-[1rem]"}
            loading={"eager"}
          />
        </a>
      </div>
    </div>
    <img
      loading={"eager"}
      src={decorator == "ellipse"
        ? EllipseDecorator.src
        : RectangleDecorator.src}
      alt="Ellipse decorator"
      class:list={[
        "absolute z-0 opacity-40 w-[45%] min-w-[10rem] max-w-[13rem] -bottom-[min(30%,_4rem)] -right-[10%]",
        decorator == "ellipse"
          ? "w-[45%] min-w-[10rem] max-w-[13rem] -bottom-[min(30%,_5rem)] -right-[10%]"
          : "w-[55%] min-w-[10rem] max-w-[14rem] -bottom-[min(30%,_4.5rem)] -right-[15%]",
      ]}
    />
  </div>
</div>

<style>
  :global(.card-content a) {
    text-decoration: underline;
    color: #21324c;
  }
</style>
